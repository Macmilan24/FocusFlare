// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime
  identifier String

  @@unique([identifier, token])
}

enum Role {
  PARENT
  CHILD
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  username      String?
  password      String?
  image         String?
  role          Role      @default(PARENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  points        Int       @default(0)

  accounts Account[]
  sessions Session[]

  parentLink       ParentChildLink[]      @relation("Parent")
  childLink        ParentChildLink[]      @relation("Child")
  learningProgress UserLearningProgress[]
  UserBadge        UserBadge[]
}

model ParentChildLink {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  parentId  String   @db.ObjectId
  childId   String   @db.ObjectId
  createdAt DateTime @default(now())
  parent    User     @relation("Parent", fields: [parentId], references: [id], onDelete: Cascade)
  child     User     @relation("Child", fields: [childId], references: [id], onDelete: Cascade)

  @@unique([parentId, childId])
}

enum ContentType {
  STORY
  QUIZ
  LESSON
  GAME
}

model LearningContent {
  id           String                 @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String?
  contentType  ContentType
  subject      String
  content      Json
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  userProgress UserLearningProgress[]

  @@unique([title, subject], name: "title_subject")
}

model UserLearningProgress {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  userId     String      @db.ObjectId
  contentId  String      @db.ObjectId
  status     String
  score      Int?
  progress   Int?
  answers    Json?
  details    Json?
  userBadges UserBadge[]

  completedAt  DateTime?
  startedAt    DateTime        @default(now())
  lastAccessed DateTime        @updatedAt
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  content      LearningContent @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@unique([userId, contentId])
  @@index([userId])
  @@index([contentId])
}

model Badge {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String   @unique
  description  String
  iconSlug     String
  criteriaText String? // User-facing text like "Complete your first story!"
  createdAt    DateTime @default(now())

  userBadges UserBadge[] // Relation to users who earned this badge
}

model UserBadge {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  userId   String   @db.ObjectId
  badgeId  String   @db.ObjectId
  earnedAt DateTime @default(now())

  user                   User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge                  Badge                 @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  UserLearningProgress   UserLearningProgress? @relation(fields: [userLearningProgressId], references: [id])
  userLearningProgressId String?               @db.ObjectId

  @@unique([userId, badgeId]) // A user can earn each badge only once
  @@index([userId])
  @@index([badgeId])
}
