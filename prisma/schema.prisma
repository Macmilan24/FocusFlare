// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime
  identifier String

  @@unique([identifier, token])
}

enum Role {
  PARENT
  CHILD
  ADMIN
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  username        String?
  password        String?
  image           String?
  role            Role      @default(PARENT)
  points          Int       @default(0)
  avatarUrl       String?
  favoriteSubject String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  currentGradeLevelId String?     @db.ObjectId
  currentGradeLevel   GradeLevel? @relation("UserCurrentGrade", fields: [currentGradeLevelId], references: [id], onDelete: SetNull)

  assessments UserAssessment[]
  accounts    Account[]
  sessions    Session[]

  parentLink       ParentChildLink[]      @relation("Parent")
  childLink        ParentChildLink[]      @relation("Child")
  learningProgress UserLearningProgress[]
  UserBadge        UserBadge[]
  roadmap          Roadmap?
}

model ParentChildLink {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  parentId  String   @db.ObjectId
  childId   String   @db.ObjectId
  createdAt DateTime @default(now())
  parent    User     @relation("Parent", fields: [parentId], references: [id], onDelete: Cascade)
  child     User     @relation("Child", fields: [childId], references: [id], onDelete: Cascade)

  @@unique([parentId, childId])
}

enum ContentType {
  STORY
  QUIZ
  LESSON
  GAME
  COURSE
}

model LearningContent {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String?
  contentType   ContentType
  subject       String
  content       Json
  coverImageUrl String?
  published     Boolean     @default(false)

  courseId      String? @db.ObjectId
  course        Course? @relation("CourseLessons", fields: [courseId], references: [id], onDelete: SetNull)
  orderInCourse Int?

  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  userProgress UserLearningProgress[]

  @@unique([title, subject], name: "title_subject")
}

model UserLearningProgress {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  userId    String @db.ObjectId
  contentId String @db.ObjectId
  status    String
  score     Int?
  progress  Int?
  answers   Json?
  details   Json?

  completedBlocks Json?

  userBadges UserBadge[]

  completedAt  DateTime?
  startedAt    DateTime        @default(now())
  lastAccessed DateTime        @updatedAt
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  content      LearningContent @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@unique([userId, contentId])
  @@index([userId])
  @@index([contentId])
}

model Badge {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String   @unique
  description  String
  iconSlug     String
  criteriaText String? // User-facing text like "Complete your first story!"
  createdAt    DateTime @default(now())

  userBadges UserBadge[] // Relation to users who earned this badge
}

model UserBadge {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  userId   String   @db.ObjectId
  badgeId  String   @db.ObjectId
  earnedAt DateTime @default(now())

  user                   User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge                  Badge                 @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  UserLearningProgress   UserLearningProgress? @relation(fields: [userLearningProgressId], references: [id])
  userLearningProgressId String?               @db.ObjectId

  @@unique([userId, badgeId]) // A user can earn each badge only once
  @@index([userId])
  @@index([badgeId])
}

model GradeLevel {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String  @unique
  description String?
  order       Int     @unique // For sorting: 1, 2, 3... Ensures logical display order

  courses          Course[]
  usersAtThisGrade User[]   @relation("UserCurrentGrade")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("grade_levels") // Explicit collection name in MongoDB
}

model Course {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  title         String      @unique
  description   String?
  subject       String // e.g., "Math", "Reading"
  coverImageUrl String?
  published     Boolean     @default(false)
  gradeLevelId  String?     @db.ObjectId // Foreign key to GradeLevel
  gradeLevel    GradeLevel? @relation(fields: [gradeLevelId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lessons      LearningContent[] @relation("CourseLessons")
  roadmapItems RoadmapItem[]

  @@map("courses")
}

model UserAssessment {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  assessmentType String   @default("initial_onboarding")
  takenAt        DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([userId, assessmentType])
  @@index([userId])
  @@map("user_assessments")
}

model Roadmap {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  items RoadmapItem[] @relation("RoadmapItems")

  @@map("roadmaps")
}

model RoadmapItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  roadmapId String  @db.ObjectId
  roadmap   Roadmap @relation("RoadmapItems", fields: [roadmapId], references: [id], onDelete: Cascade)

  courseId String @db.ObjectId
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  order  Int // The order of the course in the roadmap
  status String @default("locked") // e.g., "locked", "unlocked", "in_progress", "completed"

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([roadmapId, courseId])
  @@unique([roadmapId, order])
  @@index([roadmapId])
}
